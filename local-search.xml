<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>费曼学习法</title>
    <link href="/2023/06/10/%E8%B4%B9%E6%9B%BC%E5%AD%A6%E4%B9%A0%E6%B3%95/"/>
    <url>/2023/06/10/%E8%B4%B9%E6%9B%BC%E5%AD%A6%E4%B9%A0%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="关于费曼学习法"><a href="#关于费曼学习法" class="headerlink" title="关于费曼学习法"></a>关于费曼学习法</h2><blockquote><p>前两天偶然间了解到了费曼学习法, 算是拓宽了我对学习方法的认知. </p><p>它可以简化为四个单词 </p></blockquote><p><code>Concept</code> (概念) – <code>Teach</code> (教给别人) – <code>Review</code> (回顾) – <code>Simplify</code> (简化)</p><ol><li>第一步 : 假装把一个知识(概念) 教给一个小孩子 .</li></ol><p>尽量用最基础的词汇, 以使得这些小孩子刚好能理解这些基本的概念和知识, 当你卡壳了, 也就是不知道如何解释某个概念或与其它知识的联系的时候 – 预示着学习的机会到来了. </p><ol start="2"><li>第二步 : 回顾</li></ol><p>你已经发现了你大脑知识库的边缘, 懂得自己能力的界限也是一种能力. 你需要回到自己的原始材料, 重新学习, 直到你可以用基本的术语解释这一概念. </p><ol start="3"><li>第三步: 将语言条理化 , 简化</li></ol><p>要保证你的手上有一套自己的手写笔记 , 检查一下确保自己没有从原材料中借用任何行话. 请阅读一遍自己的手写笔记 , 如果听起来比较混乱 , 这意味着你还需要更深入的理解该领域 . 这时候你需要重新回到第二步 —— 一直重复直到你的手写笔记解释得通俗易懂且有条理性 . </p><ol start="4"><li>第四步(可选) : 传授</li></ol><p>如果你真的确保你的理解没什么问题, 检测知识最终的途径就是你能有能力把它传播给另一个人 , 如果没有这样一个具象的人 , 那你可以将自己的笔记分享出去 , 通过大家的反馈以使得自己对知识的理解更加通透. </p><blockquote><p>昨天基本上一整天时间都花在搭建博客上了, 这个学习方法也没有得到应用, 从今儿开始, 尝试这种学习方法~🎆</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>日常琐碎</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习方法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>费曼学习法</title>
    <link href="/2023/06/10/%E5%90%8E%E7%AB%AF%E5%BD%A2%E8%B1%A1%E7%90%86%E8%A7%A3%E7%AF%87/"/>
    <url>/2023/06/10/%E5%90%8E%E7%AB%AF%E5%BD%A2%E8%B1%A1%E7%90%86%E8%A7%A3%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h2 id="如何形象的理解-spring"><a href="#如何形象的理解-spring" class="headerlink" title="如何形象的理解 spring?"></a>如何形象的理解 spring?</h2><blockquote><p>依赖注入框架，帮助你管理 Java 对象，集成一些其他的内容</p></blockquote><p>让我们用通俗易懂的语言来解释Spring框架。</p><p>想象一下你在组装一台电脑。你需要连接各个硬件组件，如CPU、内存、硬盘等，并确保它们能够协同工作。Spring框架就像是电脑组装的助手，它帮助你管理和组织各个组件，并提供一些便捷的功能。</p><p>在这个比喻中：</p><ul><li>你可以将硬件组件看作是你的应用程序中的不同部分，如服务、数据访问对象、控制器等。</li><li>Spring框架则扮演了管理和组织这些组件的角色，确保它们能够协同工作。</li><li>框架提供了一种便捷的方式来连接和配置这些组件，就像你将硬件组件插入主板上的插槽一样。</li><li>框架还提供了一些额外的功能，如依赖注入（DI），就像是帮助你将各个硬件组件连接在一起，使它们可以相互通信和协作。</li><li>你可以使用框架提供的功能来实现业务逻辑，就像在电脑上运行软件应用程序一样。</li></ul><p>总的来说，Spring框架是一个帮助你管理和组织应用程序组件的工具。它简化了开发过程，提供了便捷的连接和配置方式，并提供了一些额外的功能来增强应用程序的灵活性和可维护性。使用Spring框架，你可以更轻松地构建和管理复杂的应用程序，并提供高效、可靠的功能。</p><h2 id="如何形象的理解依赖注入"><a href="#如何形象的理解依赖注入" class="headerlink" title="如何形象的理解依赖注入?"></a>如何形象的理解依赖注入?</h2><p>让我们用一个日常生活的比喻来形象地理解依赖注入。</p><p>假设你是一个厨师，需要准备一道菜。为了完成这道菜，你需要使用一些食材，如蔬菜、肉类、调味料等。</p><p>在没有依赖注入的情况下，你可能需要自己去购买这些食材，并将它们携带到厨房。这意味着你要亲自管理食材的采购、携带和使用过程。这可能会增加你的负担和工作量，还可能导致混乱和错误。</p><p>现在，假设你有一个厨师助手，他负责为你提供所需的食材。这就是依赖注入的概念在生活中的体现。</p><p>在这个比喻中：</p><ul><li>你是主厨，负责菜的制作，即应用程序的核心逻辑。</li><li>食材是你所需要的依赖对象，如服务、数据访问对象等。</li><li>厨师助手是依赖注入的机制，负责将食材提供给你，以供你使用。</li><li>依赖注入让你从繁琐的采购和管理任务中解放出来，专注于菜的制作。</li></ul><p>在编程中，依赖注入的概念类似。它是一种设计模式，通过在需要使用某个对象的地方将其注入（提供）给目标对象，减少了目标对象与依赖对象之间的耦合性。这样，目标对象可以专注于自己的业务逻辑，而不需要关心如何创建或获取依赖对象。</p><p>总而言之，依赖注入就像是一个厨师助手为你提供所需食材一样，它让你从繁琐的依赖管理中解放出来，让你的代码更加清晰、模块化和可维护。它使代码的组织和协作更加灵活和简单。</p><h2 id="如何形象的理解-springmvc"><a href="#如何形象的理解-springmvc" class="headerlink" title="如何形象的理解 springmvc ?"></a>如何形象的理解 springmvc ?</h2><blockquote><p>web 框架，提供接口访问、restful接口等能力</p></blockquote><p>让我们用一个类比来形象地理解Spring MVC。</p><p>假设你是一家快餐店的服务员，负责接待顾客并处理他们的点餐请求。</p><p>在没有Spring MVC的情况下，你可能需要一个人来处理所有的任务，包括接待顾客、记录点餐、取餐、上菜等。这样的情况下，你可能会感到忙碌和混乱，很难有效地处理顾客的需求。</p><p>现在，假设快餐店引入了Spring MVC框架来协助你进行工作。这就是Spring MVC的作用。</p><p>在这个比喻中：</p><ul><li>你是服务员，负责处理顾客的点餐请求，即处理Web请求的控制器。</li><li>顾客是Web应用的用户，发送请求给服务器。</li><li>Spring MVC框架则扮演了一个协调者的角色，负责接收请求、路由请求到适当的控制器，并将结果返回给用户。</li><li>框架提供了一些便捷的功能，如请求路由、参数绑定、视图渲染等，使你能够更加高效地处理顾客的点餐请求。</li></ul><p>使用Spring MVC，你可以将业务逻辑分散到不同的控制器中，每个控制器负责处理特定类型的请求。这样，你可以更好地组织和管理代码，并提供更好的用户体验。</p><p>总而言之，Spring MVC就像是一个服务员的协助工具，帮助你更好地处理Web请求，分散和管理业务逻辑，并提供高效的处理方式。它简化了开发过程，提供了便捷的路由和控制功能，使得Web应用的开发更加模块化、可维护和可扩展。</p><h2 id="如何形象的理解-mybatis"><a href="#如何形象的理解-mybatis" class="headerlink" title="如何形象的理解 mybatis ?"></a>如何形象的理解 mybatis ?</h2><blockquote><p>Java 操作数据库的框架，持久层框架，对 jdbc 的封装</p></blockquote><p>让我们用一个类比来形象地理解MyBatis。</p><p>假设你是一个图书管理员，负责管理图书馆的图书和借阅记录。</p><p>在没有MyBatis的情况下，你可能需要手动管理图书和借阅记录的存储、查询和更新。这意味着你需要编写大量的SQL语句来执行数据库操作，并处理与数据库的连接、事务等细节。这样的工作可能会非常繁琐和复杂。</p><p>现在，假设你有一个智能助手，他帮助你<strong>自动化处理图书和借阅记录的管理</strong>。这就是MyBatis的作用。</p><p>在这个比喻中：</p><ul><li>你是图书管理员，负责处理图书和借阅记录的管理，即数据访问对象（DAO）。</li><li>图书和借阅记录是数据库中的数据，需要进行存储、查询和更新。</li><li>MyBatis框架则扮演了一个智能助手的角色，负责处理与数据库的交互和操作。</li><li>框架提供了一种便捷的方式来映射数据库表和<code>Java</code>对象，并提供了一些SQL执行和结果映射的功能。</li></ul><p>使用MyBatis，你可以通过简单的配置文件和注解来定义SQL语句和参数映射，而无需手动编写大量的SQL语句。框架会自动处理与数据库的连接、事务和结果集的映射，让你更专注于业务逻辑的实现。</p><p>总而言之，MyBatis就像是一个智能助手，帮助你简化和自动化与数据库的交互和操作。它减少了手动编写SQL语句的工作量，提供了便捷的数据访问方式，并帮助你更好地组织和管理数据库操作的代码。使用MyBatis，你可以更轻松地进行数据库操作，并提供高效和可维护的数据访问层。</p><h2 id="如何形象的理解-mybatis-plus"><a href="#如何形象的理解-mybatis-plus" class="headerlink" title="如何形象的理解 mybatis - plus ?"></a>如何形象的理解 mybatis - plus ?</h2><blockquote><p>对 mybatis 的增强，不用写 sql 也能实现增删改查</p></blockquote><p>让我们用一个类比来形象地理解MyBatis-Plus。</p><p>假设你是一位室内设计师，负责设计客户的家居装修方案。</p><p>在没有MyBatis-Plus的情况下，你可能需要从头开始设计和实施每个客户的装修方案。这意味着你需要考虑并编写各种细节，如房间布局、材料选择、色彩搭配等。这样的工作可能会非常繁琐和耗时。</p><p>现在，假设你有一个装修助手，他为你提供了一套标准化的装修方案和设计模板。这就是MyBatis-Plus的作用。</p><p>在这个比喻中：</p><ul><li>你是室内设计师，负责设计和实施装修方案，即数据访问对象（DAO）。</li><li>客户是数据库中的表，每个客户对应一张表，需要进行增删改查等操作。</li><li>MyBatis-Plus框架则扮演了一个装修助手的角色，提供了一系列标准化的操作和设计模板。</li><li>框架提供了一种简单的方式来定义实体类和数据库表的映射关系，并提供了一些通用的数据访问功能。</li></ul><p>使用MyBatis-Plus，你可以通过简单的注解和配置来定义实体类和数据库表的映射关系，而无需手动编写繁琐的SQL语句。框架会自动处理与数据库的连接、事务和CRUD操作，让你更专注于业务逻辑的实现。</p><p>总而言之，MyBatis-Plus就像是一个装修助手，为你提供了一套标准化的操作和设计模板。它简化了数据访问层的开发过程，提供了便捷的数据访问方式，并帮助你更好地组织和管理数据库操作的代码。使用MyBatis-Plus，你可以更轻松地进行数据库操作，并提供高效和可维护的数据访问层。</p><h2 id="如何形象的理解-springboot"><a href="#如何形象的理解-springboot" class="headerlink" title="如何形象的理解 springboot ?"></a>如何形象的理解 springboot ?</h2><blockquote><p>快速启动 &#x2F; 快速集成项目。不用自己管理 spring 配置，不用自己整合各种框架</p></blockquote><p>让我们用一个类比来形象地理解Spring Boot。</p><p>假设你是一位厨师，需要准备一道复杂的菜肴。</p><p>在没有Spring Boot的情况下，你需要从头开始购买食材、准备厨房、研究菜谱、调整烹饪参数等。这意味着你需要花费大量的时间和精力来完成每个环节，才能最终完成菜肴的制作。</p><p>现在，假设你有一套现成的厨房设备和标准化的食谱，这就是Spring Boot的作用。</p><p>在这个比喻中：</p><ul><li>你是厨师，负责设计和制作菜肴，即应用程序的开发者。</li><li>菜肴是应用程序，需要进行配置、开发和部署等操作。</li><li>Spring Boot框架则扮演了一个现成的厨房设备和标准化的食谱的角色，提供了一套预定义的配置和开发规范。</li><li>框架帮助你简化了应用程序的搭建和开发过程，提供了自动配置、内嵌服务器、依赖管理等功能。</li></ul><p>使用Spring Boot，你可以通过简单的配置和约定来快速搭建和开发应用程序，无需手动处理繁琐的配置和依赖管理。框架会自动处理与服务器的集成、配置的加载和管理，让你更专注于业务逻辑的实现。</p><p>总而言之，Spring Boot就像是一个现成的厨房设备和标准化的食谱，帮助你快速搭建和开发应用程序。它简化了应用程序的搭建和开发过程，提供了自动化的配置和依赖管理，让你能够更轻松地构建高效和可维护的应用程序。</p><blockquote><p>Spring Boot是Spring的一个子项目，旨在简化Spring应用程序的搭建和开发过程，通过自动配置和约定大于配置的原则，提供了一套预定义的规范和配置，使得开发者能够更快速地创建独立的、自包含的应用程序。</p></blockquote><h2 id="什么是-junit-单元测试库"><a href="#什么是-junit-单元测试库" class="headerlink" title="什么是 junit 单元测试库?"></a>什么是 junit 单元测试库?</h2><p>JUnit是一个Java单元测试库，用于编写和执行单元测试。它提供了一组用于编写测试用例的注解和断言方法，可以帮助开发者进行自动化的单元测试。</p><p>JUnit的主要作用是帮助开发者验证代码的正确性和稳定性。通过编写单元测试用例，开发者可以针对代码的不同模块、方法或类编写测试代码，用于验证其预期行为是否符合预期。单元测试可以帮助开发者发现和修复代码中的bug，减少代码出错的可能性，并提高代码的质量和可维护性。</p><p>JUnit提供了一些常用的注解，如<code>@Test</code>用于标记测试方法，<code>@Before</code>和<code>@After</code>用于在测试方法执行前后执行一些初始化和清理操作，<code>@BeforeClass</code>和<code>@AfterClass</code>用于在所有测试方法执行前后执行一次初始化和清理操作。此外，JUnit还提供了一系列的断言方法，如<code>assertEquals</code>、<code>assertTrue</code>、<code>assertFalse</code>等，用于验证测试结果是否符合预期。</p><p>使用JUnit，开发者可以编写简洁、可重复运行的测试用例，并通过运行JUnit测试来自动执行这些测试用例，获取测试结果。这样可以提高开发效率，减少手动测试的工作量，并保证代码的可靠性和稳定性。</p><p>总之，JUnit是一个Java单元测试库，它提供了注解和断言方法，用于编写和执行单元测试，帮助开发者验证代码的正确性和稳定性，并提高代码的质量和可维护性。</p><h2 id="关于用户登录状态管理的详细过程："><a href="#关于用户登录状态管理的详细过程：" class="headerlink" title="关于用户登录状态管理的详细过程："></a>关于用户登录状态管理的详细过程：</h2><ol><li><p>客户端与服务器建立连接后，服务器为客户端创建一个会话（session），并返回会话的标识符（session ID）给客户端。这个会话可以是匿名会话，表示客户端尚未登录。</p></li><li><p>当用户成功登录时，服务器会为该用户创建一个具有用户信息的会话对象，并将会话对象存储在服务器端。通常会将用户信息存储在会话对象的属性中，例如，将用户ID、用户名等信息存储为会话属性。</p></li><li><p>服务器将会话的标识符（session ID）发送给客户端，并要求客户端将其存储为一个 cookie。这个 cookie 的作用是在客户端保存会话标识符，以便在后续的请求中携带该会话标识符。</p></li><li><p>客户端接收到服务器返回的会话标识符后，将其存储为 cookie，保存在客户端浏览器中。</p></li><li><p>当客户端再次向服务器发送请求时，在请求头中会包含该域名下的所有 cookie 信息，包括会话标识符。</p></li><li><p>服务器接收到请求后，从请求头中提取出会话标识符，通过该标识符在服务器端查找对应的会话对象。</p></li><li><p>服务器根据会话标识符找到对应的会话对象后，可以从会话对象中获取存储的用户信息，如用户的登录名等。</p></li></ol><p>总结：通过将会话标识符存储在客户端的 cookie 中，客户端在后续的请求中携带该会话标识符，使服务器能够识别客户端，并通过会话对象管理用户的登录状态和其他相关信息。</p><p>需要注意的是，上述过程是一种常见的用户登录状态管理方式，但实际上，还有其他方法可以实现用户登录状态的管理，如使用 JSON Web Token (JWT) 等。具体的实现方式可能因框架和技术选型而有所差异。</p><h2 id="简单说明cookie和session"><a href="#简单说明cookie和session" class="headerlink" title="简单说明cookie和session"></a><strong>简单说明cookie和session</strong></h2><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gcode">🪔 以最常见的登陆案例讲解cookie的使用过程：<br>（<span class="hljs-number">1</span>）首先用户在客户端浏览器向服务器首次发起登陆请求<br>（<span class="hljs-number">2</span>）登陆成功后，服务端会把登陆的用户信息设置在cookie 中，并将cookie返回给客户端浏览器<br>（<span class="hljs-number">3</span>）客户端浏览器接收到 cookie 请求后，会把 cookie 保存到本地<span class="hljs-comment">(可能是内存，也可能是磁盘，看具体使用情况而定)</span><br>（<span class="hljs-number">4</span>）以后再次访问该 web 应用时，客户端浏览器就会把本地的 cookie 带上，这样服务端就能根据 cookie 获得用户信息了<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">🪔 同样以登陆案例为例子讲解 <span class="hljs-keyword">session</span> 的使用过程：<br>（<span class="hljs-number">1</span>）首先用户在客户端浏览器发起登陆请求<br>（<span class="hljs-number">2</span>）登陆成功后，服务端会把用户信息保存在服务端，并返回一个唯一的 <span class="hljs-keyword">session</span> 标识给客户端浏览器。<br>（<span class="hljs-number">3</span>）客户端浏览器会把这个唯一的 <span class="hljs-keyword">session</span> 标识保存在起来<br>（<span class="hljs-number">4</span>）以后再次访问 web 应用时，客户端浏览器会把这个唯一的 <span class="hljs-keyword">session</span> 标识带上，这样服务端就能根据这个唯一标识找到用户信息。<br></code></pre></td></tr></table></figure><p><strong>看到这里可能会引起疑问：把唯一的 session 标识返回给客户端浏览器，然后保存起来，以后访问时带上，这难道不是 cookie 吗？</strong></p><blockquote><p>没错，session 只是一种会话机制，在许多 web 应用中，session 机制就是通过 cookie 来实现的。也就是说它只是使用了 cookie 的功能，并不是使用 cookie完成会话保存。与 cookie 在保存客户端保存会话的机制相反，session 通过 cookie 的功能把会话信息保存到了服务端。</p></blockquote><p><strong>session和cookie有什么区别？</strong></p><ol><li><p>cookie 是浏览器提供的一种缓存机制，它可以用于维持客户端与服务端之间的会话</p></li><li><p>session 指的是维持客户端与服务端会话的一种机制，它可以通过 cookie 实现，也可以通过别的手段实现。</p></li><li><p>如果用 cookie 实现会话，那么会话会保存在客户端浏览器中</p></li><li><p>而 session 机制提供的会话是保存在服务端的。</p></li></ol><p><strong>举个小例子说明Cookie和Session之间的区别和联系</strong></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">🦥 <br>假如一个咖啡店有喝五杯赠一杯咖啡的优惠，但是一次性消费<span class="hljs-number">5</span>杯咖啡的客人很少，这时就需要某种方式来记录某位顾客的消费数量。无外乎下面的几种方案：<br><span class="hljs-number">1</span>、该店的店员很厉害，能记住每位顾客的消费数量，只要顾客一走进咖啡店，店员就知道该怎么对待了。这种做法就是协议本身支持状态。但是<span class="hljs-keyword">http</span>协议本身是无状态的。<br><span class="hljs-number">2</span>、发给顾客一张卡片，上面记录着消费的数量，一般还有个有效期限。每次消费时，如果顾客出示这张卡片，则此次消费就会与以前或以后的消费相联系起来。这种做法就是在客户端保持状态，也就是cookie，顾客就相当于浏览器。<br><span class="hljs-number">3</span>、发给顾客一张会员卡，除了卡号之外什么信息也不纪录，每次消费时，如果顾客出示该卡片，则店员在店里的记录本上找到这个卡号对应的记录添加一些消费信息。这种做法就是在服务器端保持状态。<br></code></pre></td></tr></table></figure><h2 id="正向代理和反向代理的区别是什么"><a href="#正向代理和反向代理的区别是什么" class="headerlink" title="正向代理和反向代理的区别是什么?"></a>正向代理和反向代理的区别是什么?</h2><p><a href="https://www.cnblogs.com/taostaryu/p/10547132.html">原文</a></p><blockquote><p>代理其实就是一个中介，A和B本来可以直连，中间插入一个C，C就是中介。<br>刚开始的时候，代理多数是帮助内网client访问外网server用的<br>后来出现了反向代理，”反向”这个词在这儿的意思其实是指方向相反，即代理将来自外网客户端的请求转发到内网服务器，从外到内.</p></blockquote><h4 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h4><p>正向代理类似一个跳板机，代理访问外部资源 .</p><p>比如我们国内访问谷歌，直接访问访问不到，我们可以通过一个正向代理服务器，请求发到代理服，代理服务器能够访问谷歌，这样由代理去谷歌取到返回数据，再返回给我们，这样我们就能访问谷歌了 .</p><p><img src="https://weirdo-blog.oss-cn-chengdu.aliyuncs.com/blog/202306181011210.png" alt="image-20230618101113110"></p><p><strong>正向代理的用途：</strong></p><ol><li>访问原来无法访问的资源，如google</li><li>可以做缓存，加速访问资源</li><li>对客户端访问授权，上网进行认证</li><li>代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息</li></ol><h4 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h4><p>反向代理（Reverse Proxy）实际运行方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器</p><p><img src="https://weirdo-blog.oss-cn-chengdu.aliyuncs.com/blog/202306181011725.png" alt="image-20230618101124689"></p><p><strong>反向代理的作用：</strong></p><ol><li>保证内网的安全，阻止web攻击，大型网站，通常将反向代理作为公网访问地址，Web服务器是内网 . </li><li>负载均衡，通过反向代理服务器来优化网站的负载</li></ol><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><strong>正向代理即是客户端代理, 代理客户端, 服务端不知道实际发起请求的客户端.</strong></p><p><strong>反向代理即是服务端代理, 代理服务端, 客户端不知道实际提供服务的服务端</strong></p><p><img src="https://weirdo-blog.oss-cn-chengdu.aliyuncs.com/blog/202306181014100.png" alt="image-20230618101447052"></p><p><img src="https://weirdo-blog.oss-cn-chengdu.aliyuncs.com/blog/202306181013811.png" alt="image-20230618101318766"></p>]]></content>
    
    
    <categories>
      
      <category>日常琐碎</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习方法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="/2023/06/09/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/06/09/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="我的第一篇博客"><a href="#我的第一篇博客" class="headerlink" title="我的第一篇博客"></a>我的第一篇博客</h1><blockquote><p>分享琐碎</p></blockquote><p>忙里偷闲, 或者说闲来无事吧, 实际上, 时间已经来到期末, 可是呢, 我还是保留着对技术的疯狂热情, 搭建这个博客是因为偶然间在星球冲浪时, 看见一位大佬所写的hexo搭建博客系列. 正是这一契机让我花了大半天时间搞了这一个博客.</p><p>其实之前也有花时间搭过一个博客, 是通过 <code>VuePress</code> 搭建的 </p><p>(刚刚搞了好久的图床哈哈哈哈哈哈哈哈哈哈, 主要是通过 阿里云 + Pikgo + Typora 构建的)<br><img src="https://weirdo-blog.oss-cn-chengdu.aliyuncs.com/blog/202306092321545.png" alt="image-20230609232105109"></p><p>这界面还是略显花哨 , 相比呢以下界面就显得非常滴简约好看</p><p><img src="https://weirdo-blog.oss-cn-chengdu.aliyuncs.com/blog/202306092322286.png" alt="image-20230609232220960"> </p><p>话不多说, 准备优化博客咯 —— hh</p>]]></content>
    
    
    <categories>
      
      <category>日常琐碎</category>
      
    </categories>
    
    
    <tags>
      
      <tag>感想</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
